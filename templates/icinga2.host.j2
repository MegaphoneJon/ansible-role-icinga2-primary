object Host "{{ fqdn }}" {
  /* Import the default host template defined in `templates.conf`. */
  display_name = "{{ fqdn }}"
  import "generic-host"

{% if contract_type is defined and contract_type is search("VPS") and "nosudo" not in group_names %}
  /* Enable running checks from the primary Icinga on the satellite. */
  vars.client_endpoint = name
{% endif %}

{% if "firewalled" in group_names %}  
  /* Use a custom check_command - ensure port 443 is open */
  check_command = "tcp"
  vars.tcp_address = "{{ sites|first }}"
  vars.tcp_port = 443
{% else %}
  /* Specify the address attributes for checks e.g. `ssh` or `http`. */
  address = "{{ ansible_host }}"
{% endif %}
{% if ipv6 is defined %}
  address6 = "{{ ipv6 }}"
{% endif %}

  /* Set custom attribute `os` for hostgroup assignment in `groups.conf`. */
  vars.os = "Linux"

  /* Used for DNS expiration checks and for DNS blacklist checks */
  vars.second_level_domains = ["{{ slds | join('", "')}}"]

  /* Define http vhost attributes for service apply rules in `services.conf`. */
{% if sites is defined %}
{% for site in sites.values() %}
{% if site.contract_type is search("Maintenance") %}
  vars.http_vhosts["{{ site.bare_url }}"] = {
    http_uri = "{{ site.homepage_uri | default("/",true) }}"
    http_ssl = true
    http_vhost = "{{ site.bare_url }}"
    http_expect = "HTTP/1.1 200 OK"
{% if site.website_string is defined %}
    http_string = "{{ site.website_string }}"
{% endif %}
{% if site.env == 'Test' %}
    basic_auth_user = "{{ site.basic_auth_name | default(default_basic_auth_name, true) }}"
    basic_auth_password = "{{ site.basic_auth_password | default(default_basic_auth_password, true) }}"
{% endif %}
    /* CMS/CIVICRM MONITORING */
{% if site.contract_type is search("(Backdrop|Drupal) Maintenance") and (site.cms == 'Drupal' or site.cms == 'Backdrop' or site.cms == 'Drupal8') %}
    {% if site.canonical_bare_url != None -%}
    drupal_site_id = "{{ lookup('passwordstore', site.client + '/' + site.canonical_hostname + '/' + site.canonical_bare_url + '/nagioskey') }}"
    {% else -%}
    drupal_site_id = "{{ lookup('passwordstore', site.client + '/' + hostname + '/' + site.bare_url + '/nagioskey') }}"
    {% endif -%}
{% endif -%}
    cms = "{{ site.cms | lower }}"
{% if site.contract_type is not search("WordPress Maintenance") and site.cms == 'WordPress' -%}
    check_wp_updates = false
{% endif -%}
{% if site.contract_type is search("Civi Maintenance") and site.civicrm == 'Yes' %}
    crm_site_key = "{{ lookup('passwordstore', site.client + '/' + hostname + '/' + site.bare_url + '/sitekey') }}"
    {% if site.canonical_bare_url != None -%}
    crm_api_key = "{{ lookup('passwordstore', site.client + '/' + site.canonical_hostname + '/' + site.canonical_bare_url + '/civicrm_api_key') }}"
    {% else -%}
    crm_api_key = "{{ lookup('passwordstore', site.client + '/' + hostname + '/' + site.bare_url + '/civicrm_api_key') }}"
    {% endif -%}
{% endif -%}
{% if site.bare_url in groups['nextcloud'] -%}
    nextcloud = true
{% endif -%}
{% if site.monitor_backupninja is defined and site.monitor_backupninja | bool  -%}
    has_backupninja = true
{% endif %}
    site_env = "{{ site.env }}"
  }
{% endif %}
{% endfor %}
{% endif %}

  /* Define notification mail attributes for notification apply rules in `notifications.conf`. */
  vars.notification["mail"] = {
    groups = [ {{ notification_groups | default('"megaphone"', true) | replace("&quot;",'"') }} ]
    users_non_urgent = [ "jon" ]
  }
{% if contract_type is defined and contract_type is search("VPS") and "nosudo" not in group_names %}
  /* LOCAL MONITORING CUSTOM VARS */
  /* Set a custom value for procs warning */
  vars.procs_warning = 310

  /* Define disks and attributes for service apply rules in `services.conf`. */
{%- for item in ['/', '/var'] %} 
  vars.disks["disk {{ item }}"] = {
    disk_partitions = "{{ item }}"
    disk_wfree = "{{ disk_warning_percent | default(12) }}%"
    disk_cfree = "{{ disk_critical_percent | default(6) }}%"
  }
{% endfor %}
  vars.mysql_hostname = "localhost"
  /* END LOCAL MONITORING CUSTOM VARS */
{% endif %}

{% if monitor_backupninja is defined and monitor_backupninja | bool  %}
  vars.has_backupninja = true
{% endif %}
{% if check_dnsbl is defined and check_dnsbl | bool  %}
  vars.check_dnsbl = true
{% endif %}

{% include "files/" + fqdn + "/icinga2.host-include.j2" ignore missing %}
}

